import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get app_name => "Basic";
  String get click_reload => "Click on the screen to reload";
  String get collect => "Collect";
  String get confirm_password => "Confirm password";
  String get confirm_password_error => "Please confirm your password";
  String get copy_link => "CopyLink";
  String get copy_success => "Copy successful";
  String get dark_mode => "Dark Mode";
  String get empty_hint => "Empty ~";
  String get enter_password => "Password";
  String get enter_password_error => "Please enter your password";
  String get enter_username => "Username";
  String get enter_username_error => "Please enter your username";
  String get exit => "Exit";
  String get font => "Font";
  String get integral => "Integral";
  String get language_auto => "Auto";
  String get language_en => "English";
  String get language_zh_cn => "简体中文";
  String get language_zh_hk => "繁體中文(香港)";
  String get level => "Level";
  String get log_in => "Log In";
  String get log_out => "Log Out";
  String get multi_language => "Language";
  String get my_share => "My Share";
  String get network_error_hint => "There is a problem with the network ~ please check the network settings";
  String get new_article => "New";
  String get points_details => "Points Details";
  String get ranking => "Ranking";
  String get setting => "Setting";
  String get share => "Share";
  String get share_failed => "Share failed";
  String get share_success => "Share success";
  String get share_to_square => "Share";
  String get sign_up => "Sign up";
  String get square => "Square";
  String get tab_four => "System";
  String get tab_navigation => "Navigation";
  String get tab_one => "Home";
  String get tab_system => "System";
  String get tab_three => "WeChat";
  String get tab_two => "Project";
  String get theme => "Theme";
  String get theme_mode_auto => "Auto";
  String get theme_mode_close => "Off";
  String get theme_mode_open => "On";
  String get top => "Top";
  String get user_share => "User Share";
  String get wenda => "Q&A";
}

class $zh_HK extends S {
  const $zh_HK();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get points_details => "積分明細";
  @override
  String get share_success => "分享成功";
  @override
  String get enter_password_error => "請輸入密碼";
  @override
  String get enter_password => "密碼";
  @override
  String get language_zh_hk => "繁體中文(香港)";
  @override
  String get setting => "設置";
  @override
  String get enter_username => "用戶名";
  @override
  String get log_in => "登錄";
  @override
  String get theme_mode_auto => "跟隨系統";
  @override
  String get language_en => "English";
  @override
  String get new_article => "新";
  @override
  String get copy_success => "復制成功";
  @override
  String get theme_mode_open => "開啟";
  @override
  String get multi_language => "多語言";
  @override
  String get sign_up => "註冊";
  @override
  String get level => "排名";
  @override
  String get user_share => "分享人分享";
  @override
  String get share_to_square => "分享到廣播";
  @override
  String get click_reload => "點擊屏幕，重新加載";
  @override
  String get log_out => "退出";
  @override
  String get exit => "退出";
  @override
  String get square => "廣場";
  @override
  String get collect => "收藏";
  @override
  String get copy_link => "復制鏈接";
  @override
  String get tab_two => "項目";
  @override
  String get confirm_password => "確認密碼";
  @override
  String get language_auto => "跟隨系統";
  @override
  String get tab_three => "公衆號";
  @override
  String get top => "置頂";
  @override
  String get dark_mode => "暗黑模式";
  @override
  String get confirm_password_error => "請確認密碼";
  @override
  String get tab_one => "首頁";
  @override
  String get integral => "積分";
  @override
  String get theme => "主題";
  @override
  String get share => "分享";
  @override
  String get my_share => "我的分享";
  @override
  String get empty_hint => "空空如也～";
  @override
  String get wenda => "問答";
  @override
  String get network_error_hint => "網絡出問題了～ 請您查看網絡設置";
  @override
  String get theme_mode_close => "關閉";
  @override
  String get enter_username_error => "請輸入用戶名";
  @override
  String get tab_system => "體系";
  @override
  String get app_name => "Basic";
  @override
  String get tab_navigation => "導航";
  @override
  String get language_zh_cn => "简体中文";
  @override
  String get ranking => "積分排行榜";
  @override
  String get share_failed => "分享失敗";
  @override
  String get font => "字體";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get points_details => "积分明细";
  @override
  String get share_success => "分享成功";
  @override
  String get enter_password_error => "请输入密码";
  @override
  String get enter_password => "密码";
  @override
  String get language_zh_hk => "繁體中文(香港)";
  @override
  String get setting => "设置";
  @override
  String get enter_username => "用户名";
  @override
  String get log_in => "登录";
  @override
  String get theme_mode_auto => "跟随系统";
  @override
  String get language_en => "English";
  @override
  String get new_article => "新";
  @override
  String get copy_success => "复制成功";
  @override
  String get theme_mode_open => "开启";
  @override
  String get multi_language => "多语言";
  @override
  String get sign_up => "注册";
  @override
  String get level => "排名";
  @override
  String get user_share => "分享人分享";
  @override
  String get share_to_square => "分享到广播";
  @override
  String get click_reload => "点击屏幕，重新加载";
  @override
  String get log_out => "退出";
  @override
  String get exit => "退出";
  @override
  String get square => "广场";
  @override
  String get collect => "收藏";
  @override
  String get copy_link => "复制链接";
  @override
  String get tab_two => "项目";
  @override
  String get confirm_password => "确认密码";
  @override
  String get language_auto => "跟随系统";
  @override
  String get tab_three => "公众号";
  @override
  String get top => "置顶";
  @override
  String get dark_mode => "暗黑模式";
  @override
  String get confirm_password_error => "请确认密码";
  @override
  String get tab_one => "首页";
  @override
  String get integral => "积分";
  @override
  String get theme => "主题";
  @override
  String get share => "分享";
  @override
  String get my_share => "我的分享";
  @override
  String get empty_hint => "空空如也～";
  @override
  String get wenda => "问答";
  @override
  String get network_error_hint => "网络出问题了～ 请您查看网络设置";
  @override
  String get theme_mode_close => "关闭";
  @override
  String get enter_username_error => "请输入用户名";
  @override
  String get tab_system => "体系";
  @override
  String get app_name => "Basic";
  @override
  String get tab_navigation => "导航";
  @override
  String get language_zh_cn => "简体中文";
  @override
  String get tab_four => "体系";
  @override
  String get ranking => "积分排行榜";
  @override
  String get share_failed => "分享失败";
  @override
  String get font => "字体";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "HK"),
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "zh_HK":
          S.current = const $zh_HK();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
